apiVersion: apps/v1 # we set api group version to apps/v1 which is the most common API group in Kubernetes
kind: Deployment
metadata:
  # we set url-shortener-deployment as the name of this Deployment object.
  name: url-shortener-deployment 
  namespace: "{{ .Values.namespace | default "default" }}" # we define the deployment namespace and "default" as the default value
  labels:
    # as suggested by the k8s documentation, we use these standard attributes 
    # on our components:
    # this name is also used as a selector lable
    kubernetes.io/name: url-shortener-app 
    # this helps us differentiate between static frontends and apis
    kubernetes.io/component: backend
    # we use a selector name that can be used by the load balancer to target pods
    app: url-shortener-app 
spec:
  # how many pods should be spawned
  replicas: {{ .Values.shortener.replicas }}
  selector:
    matchLabels:
      app: url-shortener-app
  template:
    metadata:
      namespace: {{ .Values.namespace | default "default" }}
      labels:
        app: url-shortener-app
    spec:
      # We use two different types of init containers (a two stage initialization)
      # as this service need both the auth-service and its own database to wait for
      # them to be available for DNS lookups inside the cluster. This does not guarantee
      # that the connection to the DBMS or auth-service will be available immediately 
      # (spin wait is handled inside the application logic), but it prevents resolution errors on startup.
      # This solution is also mentioend in K8s' documentation and `busybox` is a very simple
      # placeholder container that allows us to execute shell commands.
      initContainers:
        - name: init-url-shortener-container
          image: busybox
          command: ['sh', '-c', "until nslookup auth-service; do sleep 2; done"]
        - name: init-url-shortener-database-container
          image: busybox
          command: ['sh', '-c', "until nslookup url-shortener-database; do sleep 2; done"]
      containers:
        - name: url-shortener-container
          # we select the image versione specified by the user, "latest" if undefined
          image: "docker.io/marinoandrea/wscbs-url-shortener:{{ .Values.shortener.imageVersion | default "latest" }}"
          ports:
            # what port are the pods going to listen to?
            - containerPort: {{ .Values.shortener.containerPort | default 5000 }}
          env:
            # we set the URL for the auth-service (needed for the shortener to
            # obtain the public key for token verification on initialization)
            - name: AUTH_SERVICE_URL
              value: "http://auth-service.{{ .Values.namespace | default "default" }}:{{ .Values.auth.servicePort | default 5000 }}"
            # we then set all the necessary mongodb credentials for
            # connections. these are the same that were used in the
            # statefulset initialization.
            - name: MONGODB_USER
              valueFrom:
                secretKeyRef:
                  name: url-shortener-database-credentials
                  key: mongo-db-user
            - name: MONGODB_PASS
              valueFrom:
                secretKeyRef:
                  name: url-shortener-database-credentials
                  key: mongo-db-pass
            - name: MONGODB_NAME
              valueFrom:
                configMapKeyRef:
                  name: url-shortener-database-configmap
                  key: mongo-db-name
            # finally, we set the db host to use the internal cluster DNS schema.
            # this will be used by the application to connect to the DBMS.
            - name: MONGODB_HOST
              value: "url-shortener-database.{{ .Values.namespace | default "default" }}"